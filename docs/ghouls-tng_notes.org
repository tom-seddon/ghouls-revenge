#+STARTUP: overview

* Original memory map

As Ghouls is partly BASIC, the BASIC workspace as $400...$7ff is not
available.

26 pages GMC; 39 pages GBAS; 3 pages variables; 1 page BASIC stack.

UseOK indicates whether this region is OK for Ghouls to use in
practice.

Regarding pages marked as maybe useable, OS workspace:

- 0b :: F key definitions on B/B+, Econet stuff on Master
- 0c :: UDGs on B/B+, Econet stuff on Master

B/B+ DFS workspace:

- 11-16 :: DFS random access workspace on B/B+
- 17-18 :: DFS private workspace on B/B+

If not using random access files or changing FS, on B/B+ with DFS,
pages 11-18 are useable.

Not worth supporting non-DFS setups on B/B+.

On Master, PAGE is always $e00, so only page 0d is unusable.

| Page | What   | UseOK | Notes                                       |
|------+--------+-------+---------------------------------------------|
|   09 | GMC    | Yes   |                                             |
|   0a | GMC    |       |                                             |
|------+--------+-------+---------------------------------------------|
|   0b | GMC    | Maybe | Apparently unused                           |
|   0c | GMC    |       | OS 1.20 UDGs - read on startup              |
|------+--------+-------+---------------------------------------------|
|   0d | GMC    | No    |                                             |
|   0e | GMC    |       |                                             |
|   0f | GMC    |       |                                             |
|   10 | GMC    |       |                                             |
|------+--------+-------+---------------------------------------------|
|   11 | GMC    | Maybe |                                             |
|   12 | GMC    |       |                                             |
|   13 | GMC    |       |                                             |
|   14 | GMC    |       |                                             |
|   15 | GMC    |       |                                             |
|   16 | GMC    |       |                                             |
|   17 | GMC    |       |                                             |
|   18 | GMC    |       |                                             |
|------+--------+-------+---------------------------------------------|
|   19 | GMC    | Yes   |                                             |
|   1a | GMC    |       |                                             |
|   1b | GMC    |       |                                             |
|   1c | GMC    |       |                                             |
|   1d | GMC    |       |                                             |
|   1e | GMC    |       |                                             |
|   1f | GMC    |       |                                             |
|   20 | GMC    |       |                                             |
|   21 | GMC    |       |                                             |
|------+--------+-------+---------------------------------------------|
|   22 | GBAS   | Yes   |                                             |
|   23 | GBAS   |       |                                             |
|   24 | GBAS   |       |                                             |
|   25 | GBAS   |       |                                             |
|   26 | GBAS   |       |                                             |
|   27 | GBAS   |       |                                             |
|   28 | GBAS   |       |                                             |
|   29 | GBAS   |       |                                             |
|   2a | GBAS   |       |                                             |
|   2b | GBAS   |       |                                             |
|   2c | GBAS   |       |                                             |
|   2d | GBAS   |       |                                             |
|   2e | GBAS   |       |                                             |
|   2f | GBAS   |       |                                             |
|   30 | GBAS   |       |                                             |
|   31 | GBAS   |       |                                             |
|   32 | GBAS   |       |                                             |
|   33 | GBAS   |       |                                             |
|   34 | GBAS   |       |                                             |
|   35 | GBAS   |       |                                             |
|   36 | GBAS   |       |                                             |
|   37 | GBAS   |       |                                             |
|   38 | GBAS   |       |                                             |
|   39 | GBAS   |       |                                             |
|   3a | GBAS   |       |                                             |
|   3b | GBAS   |       |                                             |
|   3c | GBAS   |       |                                             |
|   3d | GBAS   |       |                                             |
|   3e | GBAS   |       |                                             |
|   3f | GBAS   |       |                                             |
|   40 | GBAS   |       |                                             |
|   41 | GBAS   |       |                                             |
|   42 | GBAS   |       |                                             |
|   43 | GBAS   |       |                                             |
|   44 | GBAS   |       |                                             |
|   45 | GBAS   |       |                                             |
|   46 | GBAS   |       |                                             |
|   47 | GBAS   |       |                                             |
|   48 | GBAS   |       |                                             |
|   49 | GBAS   |       |                                             |
|------+--------+-------+---------------------------------------------|
|   4a | BVars  | Yes   | Includes some slack space                   |
|   4b | BVars  |       |                                             |
|   4c | BVars  |       |                                             |
|------+--------+-------+---------------------------------------------|
|   4d | Spare  | Yes   |                                             |
|   4e | Spare  |       |                                             |
|   4f | Spare  |       |                                             |
|   50 | Spare  |       |                                             |
|   51 | Spare  |       |                                             |
|   52 | Spare  |       |                                             |
|   53 | Spare  |       |                                             |
|   54 | Spare  |       |                                             |
|   55 | Spare  |       |                                             |
|   56 | Spare  |       |                                             |
|------+--------+-------+---------------------------------------------|
|   57 | BStack | Yes   | Hopefully won't grow into the page below... |
|------+--------+-------+---------------------------------------------|
|   58 | Screen |       |                                             |
|  ... |        |       |                                             |
|   7f |        |       |                                             |
|------+--------+-------+---------------------------------------------|

Some notes:

- End of BASIC variables can be seen at $02/$03 (see
  http://8bs.com/basic/memory.htm)

- There's a few places now where strings are built up using `CHR$`,
  rather than just being a literal with embedded control codes. But I
  think such operations are performed in the string work area in page
  6? - so it's only the final length of the string that influences how
  much BASIC heap space is used. So the end result should be the same
  (or near enough)

* Available zero page

- $70...$8f :: BASIC workspace left free for user programs
- $a8...$af :: available between * commands (any * command might
  overwrite)
- $b0...$bf :: available between FS calls (any FS call might
  overwrite)

Possibly also available:

- $50...$70 :: not obviously used by any 6502 version of BBC BASIC, as
  far as I can tell - see
  https://github.com/tom-seddon/basic_editor/blob/0d88b6e3bf0290a4b62fc3ac48730a61e7d12f9b/basiced.s65#L99

* Level stuff

Level is a 20*25 grid. 

Top left is at (0,5)

UDGs used:

- 224 e0 :: block ||
- 225 e1 :: spring (upper)
- 226 e2 :: block \\
- 227 e3 :: block //
- 228 e4 :: spikes
- 229 e5 :: spring (lower)
- 243 f3 :: dots

Things that a level can contain:

| Thing      | Types | Max in level |
|------------+-------+--------------|
| Block      |     3 | -            |
| Spikes     |     1 | -            |
| Dots       |     1 | -            |
| Springs    |     2 | -            |
| Spider     |     1 | 1            |
| Platform   |     1 | 1            |
| Conveyor   |     1 | 1            |
| Power pill |     1 | -            |

Spider and platform have configurable speeds.

Start and end positions are currently fixed.

Coordinates are given as per PRINT TAB.

Fractional coordinates are possible for spiders, platforms, conveyors
and power pills, as they are positioned by screen address.

** SPECTRES' LAIR

| What     |  X |  Y | Condition |
|----------+----+----+-----------|
| Spike    |  7 | 23 |           |
| Pill     | 18 | 15 |           |
| Dots     |  7 | 27 |           |
| Dots     |  8 | 27 |           |
| Dots     |  9 | 27 |           |
| Dots     | 10 | 27 |           |
| Dots     | 11 | 27 |           |
| Dots     | 12 | 27 |           |
| Dots     |  9 | 22 |           |
| Dots     | 10 | 22 |           |
| Dots     | 11 | 22 |           |
| Dots     | 12 | 22 |           |
| Dots     | 13 | 22 |           |
| Dots     | 14 | 22 |           |
| Dots     |  1 |  4 |           |
| Dots     |  2 |  4 |           |
| Dots     |  6 |  4 |           |
| Dots     |  7 |  4 |           |
| Platform |  8 | 14 |           |
| PSpeed   |  6 |    |           |
| Spider   |  9 | 14 | GO>0      |
| SSpeed   |  8 |    | GO>0      |

#+begin_example
  --0001020304050607080910111213141516171819--
  05__________________________________\\||||05
  06||||//____\\||||||________||____________06
  07________________||____________||________07
  08__________________||||//________________08
  09__________________________||____________09
  10________________________________________10
  11____\\||||||||||//____\\||||||||||//____11
  12||______________________________________12
  13||||____________________________________13
  14____||__||__________________||__________14
  15____________________________||||________15
  16________________________________________16
  17__________________________________||||||17
  18__________||||______________||||||||||||18
  19__________________\\||||||||||||||||||||19
  20____||||________________________________20
  21||______________________________________21
  22||||____________________________________22
  23||||||__________________________________23
  24||||||||//__\\||||||||||||||||//________24
  25________________________________________25
  26__________________________________||||||26
  27________________________________||||||||27
  28____________________________||||||||||||28
  29||||||||||||||||||||||||||||||||||||||||29
  --0001020304050607080910111213141516171819--

#+end_example

** HORRID HALL

| What     |   X |  Y | Condition |
|----------+-----+----+-----------|
| Spikes   |   4 | 17 |           |
| Spring U |  17 | 26 |           |
| Spring L |  17 | 27 |           |
| Spikes   |  17 | 12 |           |
| Dots     |   6 | 11 |           |
| Dots     |   7 | 11 |           |
| Dots     |   8 | 11 |           |
| Dots     |   9 | 11 |           |
| Dots     |  10 | 11 |           |
| Dots     |  11 | 11 |           |
| Dots     |  12 | 11 |           |
| Dots     |  13 | 11 |           |
| Dots     |  14 | 11 |           |
| Dots     |  15 | 11 |           |
| Dots     |  11 | 17 |           |
| Dots     |  12 | 17 |           |
| Dots     |  13 | 17 |           |
| Dots     |  14 | 17 |           |
| Dots     |  15 | 17 |           |
| Dots     |  16 | 17 |           |
| Dots     |  17 | 17 |           |
| Platform |  14 |  7 |           |
| PSpeed   |  14 |    |           |
| Conveyor |  18 | 13 |           |
| Spider   | 0.5 | 12 | GO>0      |
| SSpeed   |   4 |    | GO>0      |
| Pill     |   1 | 23 |           |

#+begin_example
  --0001020304050607080910111213141516171819--
  05__________________________________\\||||05
  06________________________________________06
  07||____________________________________||07
  08________________________________________08
  09________\\||||||||||||||||||||||||______09
  10__________________________________||____10
  11________________________________________11
  12____________________________________||||12
  13__________||__________________________||13
  14______||||______________________________14
  15________________________________________15
  16||||____________________________________16
  17||||||__________________________________17
  18||||||||||||||//________________________18
  19____________________\\||||||||||||||||||19
  20________________________________________20
  21____________||||//______________________21
  22__________||||______________||||________22
  23________||||________\\||||||||__________23
  24______||||______________________________24
  25||||||||________________________________25
  26________________||||________||||||||||||26
  27__________________________||||||||||||||27
  28__________||||__________||||||||||||||||28
  29||||||||||||||||||||||||||||||||||||||||29
  --0001020304050607080910111213141516171819--
#+end_example

** SPIDERS PARLOUR

| What     |  X |  Y | Condition |
|----------+----+----+-----------|
| Spring U | 14 |  8 |           |
| Spikes   |  1 | 13 |           |
| Spikes   | 17 | 16 |           |
| Spikes   |  8 | 24 |           |
| Spikes   | 10 | 24 |           |
| Spikes   |  7 | 28 |           |
| Dots     | 13 |  9 |           |
| Dots     | 14 |  9 |           |
| Dots     | 15 |  9 |           |
| Dots     | 16 |  9 |           |
| Dots     | 17 |  9 |           |
| Dots     | 18 |  9 |           |
| Dots     |  9 | 15 |           |
| Dots     | 10 | 15 |           |
| Dots     | 11 | 15 |           |
| Dots     | 12 | 15 |           |
| Dots     | 13 | 15 |           |
| Dots     | 14 | 15 |           |
| Platform | 13 | 14 |           |
| PSpeed   |  5 |    |           |
| Conveyor | 18 | 17 |           |
| Spider   |  7 |  7 |           |
| SSpeed   | 12 |    |           |
| Pil      |  1 | 22 |           |

#+begin_example
  --0001020304050607080910111213141516171819--
  05__________________________________\\||||05
  06____________\\||||//____________________06
  07________________________________________07
  08__________________________||||||||______08
  09________________________________________09
  10______________________||________________10
  11____||||||||||||||||||||||||||||||||||||11
  12________________________________________12
  13||______________________________________13
  14||____________________________||||______14
  15________________________________________15
  16____________________________________||||16
  17____________||________________________||17
  18________________________________________18
  19______||||______________________________19
  20__________||____________________________20
  21____________||||________________________21
  22________________________________________22
  23__________________||||__________________23
  24||||||||________________________||||____24
  25________||||||||||||||||||||||||________25
  26______________________________________||26
  27____________________________________||||27
  28__________________||||____________||||||28
  29||||||||||||||||||||||||||||||||||||||||29
  --0001020304050607080910111213141516171819--
#+end_example

** DEATH TOWER

| What     |  X |  Y | Condition |
|----------+----+----+-----------|
| Spikes   |  2 |  7 |           |
| Spikes   |  5 |  7 |           |
| Spikes   |  8 |  7 |           |
| Spikes   |  9 | 17 |           |
| Spikes   | 15 | 17 |           |
| Spring U | 16 | 27 |           |
| Spring L | 16 | 28 |           |
| Dots     |  3 | 22 |           |
| Dots     |  4 | 22 |           |
| Dots     |  5 | 22 |           |
| Dots     |  6 | 22 |           |
| Dots     |  7 | 22 |           |
| Dots     |  8 | 22 |           |
| Dots     |  2 |  9 |           |
| Dots     |  3 |  9 |           |
| Dots     |  4 |  9 |           |
| Dots     |  5 |  9 |           |
| Dots     |  6 |  9 |           |
| Dots     |  7 |  9 |           |
| Dots     | 10 | 16 |           |
| Dots     | 11 | 16 |           |
| Dots     | 12 | 16 |           |
| Dots     | 13 | 16 |           |
| Platform |  9 | 15 |           |
| PSpeed   |  8 |    |           |
| Conveyor | 18 | 21 |           |
| Spider   |  6 | 25 |           |
| SSpeed   | 12 |    |           |
| Pill     |  2 | 17 |           |
| Pill     |  1 | 6  |           |

#+begin_example
  --0001020304050607080910111213141516171819--
  05__________________________________||||||05
  06________________________________________06
  07______________________________||________07
  08____||||||||||||||||||______||||________08
  09__________________________||____||______09
  10________________________||________||____10
  11||||__||____||____||__||________________11
  12__||||__||||__||||____________________||12
  13____________________________||||____||__13
  14__________________________||____||||____14
  15||____________________||||______________15
  16__||||__________________________________16
  17__________||____________________________17
  18____________||||||||||||||||||||||||____18
  19____||__________________________________19
  20______________________________________||20
  21||________||__________________________||21
  22__||____________________________________22
  23________________________________________23
  24______||||||||||||||______||||__________24
  25____________________||__________________25
  26||______________________________________26
  27||||__________________________||__||____27
  28||||||______________________||||__||||__28
  29||||||||||||||||||||||||||||||||||||||||29
  --0001020304050607080910111213141516171819--
#+end_example

* Level data format

** Header

Offsets are relative to the start of the file.

| Offset | Type    | Name  | What                            |
|--------+---------+-------+---------------------------------|
|     +0 | byte[4] | ident | 60 d7 73 0e - file magic number |
|--------+---------+-------+---------------------------------|
|     +4 |         |       | header size                     |

The magic number is =&0e73d760= when read with BBC BASIC's `!`
operator.

The header is followed by 4 sets of level data, then optional text
data.

** Level data

Offsets are relative to the start of the level data.

| Offset | Type         | Name        | What                                 |
|--------+--------------+-------------+--------------------------------------|
|     +0 | char[17]     | name        | Level name, CR-terminated            |
|    +17 | byte         | colour3     | Physical colour for logical colour 3 |
|    +18 | byte         | pl_start_x  | Player start X                       |
|    +19 | byte         | pl_start_y  | Player start Y                       |
|    +20 | byte         | flags       | Flags - see below                    |
|    +21 | byte         | ghost_min_x | Ghost rect (inclusive)               |
|    +22 | byte         | ghost_min_y | "                                    |
|    +23 | byte         | ghost_max_x | "                                    |
|    +24 | byte         | ghost_max_y | "                                    |
|    +25 | byte[30]     | spare       | Available for future expansion       |
|    +55 | byte[26][20] | map         | Map data                             |
|--------+--------------+-------------+--------------------------------------|
|   +575 |              |             | level total size                     |

(So total level data size is header size+4*level size = 4+4*575 = 2304
(0x900), or 2560 (0xa00) if text data is present too - the size of
~spare~ being chosen to allow this total to be a round number)

The player start pos is stored as X/Y, with (0,0) as top left of
level, as that's how the editor manages everything internally. It's
easy for the game's BASIC driver to do the address calculation and
adjust for the game's different top Y.

Same applies to the ghost rect.

Flags are:

| Bit | What                             |
|-----+----------------------------------|
|   7 |                                  |
|   6 |                                  |
|   5 |                                  |
|   4 |                                  |
|   3 |                                  |
|   2 |                                  |
|   1 | Set if no standard goal in level |
|   0 | Set if ghost rect is valid       |

If ghost rect not valid, the ghost position is the previous default
behaviour: initial address is =&6000+RND(300)*16=.

If there is a standard goal in the level, it will be drawn in the top
right as per the original game.

** Text data

5*40+1 = 201 bytes for instruction text

8*20+1 = 161 bytes for ending text

30+1 = 31 bytes for level name

201+161+31=393

Decided against packing them in the end. The editor coding was
supremely tedious.

** Object types

An object can exist just a stationary sprite drawn in screen memory.
It can also be a dynamic object, that has an entry in the object
arrays allowing it to be updated each frame.

The object arrays hold 6 bytes per object: type (aka otype - this is
not serialized, and doesn't need to be consistent), screen address,
var0, var1 and var2.

otype 0 is the blank object, but the other numbers are arbitrary.

| otype | What              | Sprite    | W | H | Dyn? | var0      | var1  | var2     |
|-------+-------------------+-----------+---+---+------+-----------+-------+----------|
|     0 | Blank             | empty     | 1 | 1 |      |           |       |          |
|       | Left Block        | lblock    | 1 | 1 |      |           |       |          |
|       | Right Block       | rblock    | 1 | 1 |      |           |       |          |
|       | Left Block U      | lblocku   | 1 | 1 |      |           |       |          |
|       | Right Block U     | rblocku   | 1 | 1 |      |           |       |          |
|       | Block             | block     | 1 | 1 |      |           |       |          |
|       | Spikes            | spikes    | 1 | 1 |      |           |       |          |
|       | Left Spikes       | lspikes   | 1 | 1 |      |           |       |          |
|       | Right Spikes      | rspikes   | 1 | 1 |      |           |       |          |
|       | Solid Red         | solid_red | 1 | 1 |      |           |       |          |
|       | Spring (1 row)    | spring    | 1 | 1 |      |           |       |          |
|       | Spring (2 rows)   | spring    | 1 | 2 |      |           |       |          |
|       | Dots              | dots      | 1 | 1 |      |           |       |          |
|       | Left Dot          | ldot      | 1 | 1 |      |           |       |          |
|       | Right Dot         | rdot      | 1 | 1 |      |           |       |          |
|       | Pill              | pill      | 1 | 1 |      |           |       |          |
|       | Conveyor RtL      | conveyor  | 1 | 1 | y    | dir       |       | ucounter |
|       | Floating Platform | platform  | 2 | 1 | y    | dir       | speed | ucounter |
|       | Spider            | spider    | 2 | 2 | y    | frame/dir | speed | ucounter |

- dir :: bit 0 = direction: 0=left/up, 1=right/down
- frame/dir :: bit 1 = anim frame; bit 0 = direction (as above)
- speed :: reest value for update counter. 1=fastest, 0=slowest
- ucounter :: update counter. Decremented each frame. Object updates when 0

Dynamic objects also need an update routine, called each frame with X
holding index of the object.

** Map data

A 20 wide x 26 high grid of bytes. Bytes as follows:

(As with the otypes, ltype 0 is the blank one, and the rest are
arbitrary. But unlike the otypes, these values are saved in the level
file, and must remain consistent.)

| LType | OType             | Notes                                 |
|-------+-------------------+---------------------------------------|
|     0 | 0                 |                                       |
|     1 | Left Block        |                                       |
|     2 | Right Block       |                                       |
|     3 | Block             |                                       |
|     4 | Spikes            |                                       |
|     5 | Spring (1 row)    |                                       |
|     6 | Spring (2 rows)   |                                       |
|     7 | Dots              |                                       |
|     8 | Pill              |                                       |
|     9 | Conveyor RtL      |                                       |
| 10-29 | Floating Platform | 20 speeds, 1-20                       |
| 30-49 | Spider            | 20 speeds                             |
| 50-69 | Spider            | 20 speeds. Appears only when >1 ghost |
|    70 | Left Block U      |                                       |
|    71 | Right Block U     |                                       |
|    72 | Left Dot          |                                       |
|    73 | Right Dot         |                                       |
|    74 | Left Spikes       |                                       |
|    75 | Right Spikes      |                                       |
|    76 | Solid Red         |                                       |
|    77 | Left Rope         |                                       |
|    78 | Right Rope        |                                       |
|    79 | Goal              |                                       |
|    80 | Treasure          |                                       |
|    81 | Treasure          | Positioned by bottom row              |

* New memory map

Assuming PAGE=&1100 and HIMEM=&5800 there are 71 pages of main RAM.

Generous estimates for budgets: (current totals are lower)

| What           | # pages |
|----------------+---------|
| Level data     |      10 |
| GMC            |      16 |
| GBAS           |      35 |
| GBAS variables |       2 |
| BASIC stack    |       1 |
|----------------+---------|
| Total          |      64 |
#+TBLFM: @>$2=vsum(@I..@II)
(do a C-c C-c on the TBLFM line to update the total)

Additional free RAM could be found at $900 and $a00. And the BASIC
input buffer at $700 could be available for emergency use.

This suggests as a first draft memory map:

| Page | What            | Notes                               |
|------+-----------------+-------------------------------------|
|   09 | Object arrays   |                                     |
|   0a |                 |                                     |
|------+-----------------+-------------------------------------|
|   0b | ...             |                                     |
|------+-----------------+-------------------------------------|
|   0c | UDGs (OS 1.20)  |                                     |
|------+-----------------+-------------------------------------|
|   11 | GBAS            | PAGE=&1100                          |
|   12 |                 |                                     |
|   13 |                 |                                     |
|   14 |                 |                                     |
|   15 |                 |                                     |
|   16 |                 |                                     |
|   17 |                 |                                     |
|   18 |                 |                                     |
|   19 |                 |                                     |
|   1a |                 |                                     |
|   1b |                 |                                     |
|   1c |                 |                                     |
|   1d |                 |                                     |
|   1e |                 |                                     |
|   1f |                 |                                     |
|   20 |                 |                                     |
|   21 |                 |                                     |
|   22 |                 |                                     |
|   23 |                 |                                     |
|   24 |                 |                                     |
|   25 |                 |                                     |
|   26 |                 |                                     |
|   27 |                 |                                     |
|   28 |                 |                                     |
|   29 |                 |                                     |
|   2a |                 |                                     |
|   2b |                 |                                     |
|   2c |                 |                                     |
|   2d |                 |                                     |
|   2e |                 |                                     |
|   2f |                 |                                     |
|   30 |                 |                                     |
|   31 |                 |                                     |
|   32 |                 |                                     |
|   33 |                 | TOP=approx &3400                    |
|------+-----------------+-------------------------------------|
|   34 | BASIC variables | currently don't even reach $3600... |
|   35 |                 |                                     |
|   36 |                 |                                     |
|   37 |                 |                                     |
|   38 |                 |                                     |
|   39 |                 |                                     |
|   3a | BASIC stack     | HIMEM=&3B00                         |
|------+-----------------+-------------------------------------|
|   3b | GMC             |                                     |
|   3c |                 |                                     |
|   3d |                 |                                     |
|   3e |                 |                                     |
|   3f |                 |                                     |
|   40 |                 |                                     |
|   41 |                 |                                     |
|   42 |                 |                                     |
|   43 |                 |                                     |
|   44 |                 |                                     |
|   45 |                 |                                     |
|   46 |                 |                                     |
|   47 |                 |                                     |
|   48 |                 |                                     |
|   49 |                 |                                     |
|   4a |                 |                                     |
|   4b |                 |                                     |
|   4c |                 |                                     |
|------+-----------------+-------------------------------------|
|   4d | Levels          |                                     |
|   4e |                 |                                     |
|   4f |                 |                                     |
|   50 |                 |                                     |
|   51 |                 |                                     |
|   52 |                 |                                     |
|   53 |                 |                                     |
|   54 |                 |                                     |
|   55 |                 |                                     |
|   56 |                 |                                     |
|   57 |                 |                                     |
|------+-----------------+-------------------------------------|
|   58 | Screen          |                                     |
|  ... |                 |                                     |
|   7f |                 |                                     |
|------+-----------------+-------------------------------------|

GBAS changes mode somewhat often, but this is fixable - set HIMEM on
startup and use VDU22 to switch mode after.

(Another option might be just to let BASIC do its normal thing, and
put stuff somewhere in the spare area between top of vars and bottom
of stack. But then BASIC can't check for running out of space, which
is a big advantage of changing HIMEM.)

* Random dwords

#+begin_example
  47d65566 91bb7292 19587b3a 0556067e 3bb4ecce 3f601de6 dc74e30f ed70f80c
  85b70920 befbe097 ae94dc3c 89c4c633 f61fc4ea 44f28841 ee86c3d3 34c521ad
  cf55529e 261feccd 5ebf2f60 efac74ac ee7e1bbb 2d889700 99f66393 c661c956
  346502c2 8a56ecc4 bcccfc2f a13fe7c6 ae3f8cba 25003252 30a2406b 881d4773
  2d9390fc eac1f88c 0adfecab 38084aff 281807a7 b9e5e8c6 def42225 b79a46e2
  f28dfecf d29d6137 61612950 ea9bb992 a226aeb2 6760e693 f22b25ee b06291a7
  8f59fafe d8240405 251eebbd f770a965 06a3e5cb e1a98cf2 67e6f687 ea712ae3
  7386c168 68fcfc6a c9fc01f6 0453bdd1 88b1bac6 a5effbad 98ab30d2 7c3ff32b
#+end_example

* DRAW/MOVE/GCOL

- DRAW x,y :: 25 5 <x >x <y >y
- GCOL x,y :: 18 x y
- MOVE :: 25 4 <x >x <y >y

* Editor layouts

: 01234567890123456789
: NEW: XX    CVAL: XX
:      XX
: CUR: XX    CVAL: XX
:      XX

* Editor key handling??

#+begin_src 6502-asm
		  ldy #n          ;2
  loop:
		  ldx editor_keys,y
		  lda key_counter_flags,x
		  and editor_key_flags,y
		  beq next               ;(+ 3 3 3 2)=11
		  tya
		  pha
		  lda editor_routines_lo,y
		  sta jsr_editor_routine+1
		  lda editor_routines_hi,y
		  sta jsr_editor_routine+2
  jsr_editor_routine: jsr $ffff
		  pla
		  tay             ;(+ 1 1 3 3 3 3 3 1 1)=19
  next:
		  dey
		  bpl loop        ;3

		  ; 35+4n

		  ; 4 bytes/key
  editor_keys:
  editor_key_flags:
  editor_routines_lo:
  editor_routines_hi:
                
#+end_src

* =wip/new_blocks=

Before:

#+begin_example
  8827/10752 (1925 free) $.GBAS 79f00011c21370c4a3be122be6c16b122e770bb1
  3953/4096 (143 free) $.GMC 107023ed9dc4c4e6d818ad96abd46c86ec4c48fb
  8416/12032 (3616 free) $.GEDMC 09932d37ba23fc6a412675076b0854e3786ead0a
  2304/2304 (0 free) $.GLEVELS 010b42ba8ef089822506b089165b927c852d4ac0
  192/512 (320 free) $.GUDGS 6eb344ceb81177cec820cfc14db0ea7858ad8ec7
#+end_example

* Level text

Default instruction text:

: 0123456789012345678901234567890123456789
:   Situated in a deadly haunted mansion,
:  you have to rescue your power jewels
:  from the horrid ghost that stole them.

Lines are cyan (134). "haunted" is red (129).

Default ending text:

: 01234567890123456789|
:    GHOST GAVE UP.   |1
:                     |2
:  YOU TOOK THE POWER |3
:       JEWELS        |4
:  AND ESCAPED TO GET |5
:    SOME MORE.....   |6
:                     |7
:  AWARDED EXTRA LIFE |8

Budgets:

- Instruction text: 3*40=120
- Ending text: 5*20=100

120+100=220... that's then 36 bytes for the level name.

But if packing 1 char into 7 bits. 256 bytes = 2048 bits. 2048/7 = 292
chars.

Then 5*20+4*40=260. 32 chars left for level name. But the data will
need quantizing to byte boundaries I guess. LCM of 8 (bits per byte)
and 7 (bits per char) = 56. 7 (56/8) bytes = 8 (56/7) chars.

160 (4*40) chars for instructions = 160*7 = 1120 bits = 1120/8 = 140.0
bytes.

100 (5*20) chars for ending text = 100*7 = 700 bits = 700/8 = 87.5
bytes. So 88 bytes.

256-228=28 bytes left. 28*8/7 = 32 chars for level name.

For some reason I didn't think to book any per file flags :( - d'oh.
But it's salvageable: reserve 1 level flag bit for file flags, and now
there are 4 flags, 1 per level. A bit ugly but not the end of the
world.

To print this stuff, have a routine that unpacks a stream of 7-bit
chars and prints via OSWRCH, with chars<32 being printed as 128+N so
that Mode 7 control codes can get through. Don't allow embedded
newlines or anything, as the text has a fixed budget vertically.

: .pack_text x"06"..b" Situated in a deadly"..x"01"..b"haunted"..x"06"..b"mansion, "..x"06".."you have to rescue your power jewels   "..x"06"..b"from the horrid ghost that stole them.                                         "
: .pack_text b" YOU TOOK THE POWER       JEWELS         AND ESCAPED TO GET    SOME MORE.....                       "

* EOF
