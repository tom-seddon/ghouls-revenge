                .include "gcommon.s65"

;-------------------------------------------------------------------------

*=$70
                .dsection zp
                .cerror *>$90,'zp overflow'

*=$3000
                .dsection code
                .cerror *>$7c00,'code overflow'

;-------------------------------------------------------------------------

level_name_x=4
level_name_y=8
designer_x=11
designer_y=19
difficulty_x=13
difficulty_y=20
instructions_x=0
instructions_y=12

input_buffer=$700
                .cerror (<input_buffer)!=0
                
;-------------------------------------------------------------------------

                .section zp
level: .fill 1
text_src: .fill 2
text_dest: .fill 2
bbc_file_name: .fill 2
commands_addr: .fill 2
old_brkv: .fill 2
                .endsection zp

;-------------------------------------------------------------------------

load_text: .macro stem
                ldx level
                lda \1_lo,x
                sta text_src+0
                lda \1_hi,x
                sta text_src+1
                .endmacro

mode7_addr: .function _x,_y
                .cerror _x<0||_x>39
                .cerror _y<0||_y>24
                .endfunction $7c00+_y*40+_x

write_text0: .macro _x,_y
                lda #<mode7_addr(\_x,\_y)
                ldy #>mode7_addr(\_x,\_y)
                jsr write_text_routine
                .endmacro

write_text0n: .macro x_,y_,_n
                lda #<mode7_addr(\x_,\y_)
                ldy #>mode7_addr(\x_,\y_)
                jsr write_text_routine
                lda #\_n
                jsr write_spaces
                .endmacro

;-------------------------------------------------------------------------
                .section code
;-------------------------------------------------------------------------

entry:
                lda brkv+0
                sta old_brkv+0
                lda brkv+1
                sta old_brkv+1
                
                ; re-enable Escape
                lda #229
                ldx #0
                ldy #0
                jsr osbyte

                lda #22
                jsr oswrch
                lda #7
                jsr oswrch
                
                lda #0
                sta level

restart:
                lda old_brkv+0
                sta brkv+0
                lda old_brkv+1
                sta brkv+1
                
                ldx #$ff
                txs

                jsr redraw_screen

                ; cursor keys = ASCII values
                lda #4
                ldx #1
                jsr osbyte

main_loop:
                lda #19
                jsr osbyte
                
                jsr redraw_level_info

key_loop:
                ; don't care about ESCAPE...
                lda #$7e
                jsr osbyte
                
                jsr osrdch

                cmp #13
                beq load_level

                cmp #136
                beq left

                cmp #137
                beq right

                cmp #'a'
                bcc +
                cmp #'z'+1
                bcs +
                and #$df
+
                cmp #'Z'
                beq custom_levels
                cmp #'A'+num_levels-1
                bcs key_loop
                cmp #'A'
                bcc key_loop
                sec
                sbc #'A'
                sta level
                jmp main_loop

custom_levels:
                lda #num_levels-1
                sta level
                jmp main_loop

left:
                dec level
                bpl main_loop
                lda #num_levels-1
                sta level
                jmp main_loop

right:
                inc level
                lda level
                cmp #num_levels
                bne main_loop
                lda #0
                sta level
                jmp main_loop

redraw_level_info:
                .load_text level_title_addrs
                .write_text0n level_name_x,level_name_y+0,title_length
                .write_text0n level_name_x,level_name_y+1,title_length

                .load_text level_instr_addrs
                .write_text0n instructions_x,instructions_y,size(TextData.instructions)

                .load_text level_designer_addrs
                .write_text0n designer_x,designer_y,25

                .load_text level_difficulty_addrs
                .write_text0n difficulty_x,difficulty_y,25

                lda level
                cmp #num_levels-1
                beq +
                clc
                adc #'A'
                jmp store
+
                lda #'Z'
store:
                sta mode7_addr(39,24)
                rts

;-------------------------------------------------------------------------

redraw_screen:
                ldx #0
print_screen_loop:
                lda screen,x
                jsr oswrch
                inx
                cpx #size(screen)
                bne print_screen_loop
                rts

;-------------------------------------------------------------------------

load_level:
                ldx level
                lda level_bbc_file_name_addrs_lo,x
                sta bbc_file_name+0
                lda level_bbc_file_name_addrs_hi,x
                sta bbc_file_name+1

                ldy #0
                lda (bbc_file_name),y
                cmp #13
                beq custom

load_bbc_file_name:
                lda bbc_file_name+0
                sta osfile_block+0
                lda bbc_file_name+1
                sta osfile_block+1

                lda #$ff        ; load file
                ldx #<osfile_block
                ldy #>osfile_block
                jsr osfile

                lda $0281       ; AUG p117
                bne +

                lda #<run_commands_gbas
                sta commands_addr+0
                lda >#run_commands_gbas
                sta commands_addr+1
                jmp type_run_commands

+
                lda #<run_commands_dgbas
                sta commands_addr+0
                lda #>run_commands_dgbas
                sta commands_addr+1
                .cerror *!=type_run_commands

type_run_commands:
                ldy #0
type_run_commands_loop:
                tya
                pha

                lda (commands_addr),y
                beq run_commands_typed

                tay
                lda #138
                ldx #0

                jsr osbyte

                pla
                tay
                iny
                jmp type_run_commands_loop

run_commands_typed:
                ldx #<load_gmc
                ldy #>load_gmc
                jsr oscli

                lda #21
                jsr oswrch

                ldx #<basic
                ldy #>basic
                jmp oscli

;-------------------------------------------------------------------------

restart_custom:
                jsr redraw_screen
                jsr redraw_level_info
                .cerror *!=custom
custom: .proc
                ldx #0
print_loop:
                lda text,x
                jsr oswrch
                inx
                cpx #size(text)
                bne print_loop

                ldx #<input
                ldy #>input
                lda #0
                jsr osword
                bcs restart

                lda #<brk_handler_custom_star
                sta brkv+0
                lda #>brk_handler_custom_star
                sta brkv+1

                ldx #0
skip_spaces_loop:
                lda input_buffer,x
                cmp #' '
                bne spaces_skipped
                inx
                jmp skip_spaces_loop
spaces_skipped:
                cmp #'*'
                beq star

                cmp #13
                beq restart     ; empty input

                stx bbc_file_name+0
                lda #>input_buffer
                sta bbc_file_name+1
                jmp load_bbc_file_name

input:
                .word input_buffer
                .byte 169
                .byte 32
                .byte 126
                
text: .block
                .byte 28,0,difficulty_y,39,instructions_y
                .byte 12
                .byte 26
                .byte 31,0,designer_y
                .text 134,"Enter levels file name to load, *",10,13,134,"command to execute, or",135,"ESCAPE",134,"to",10,13,134,"cancel"
                .for _i=0,_i<5,_i+=1
                .byte 31,0,instructions_y+_i
                .byte 132,157,131
                .byte 31,39,instructions_y+_i
                .byte 156
                .endfor
                .byte 28,3,instructions_y+4,38,instructions_y
                .byte 12
                .byte 28,3,instructions_y+4,36,instructions_y
                .byte 23,1,1,0,0,0,0,0,0,0
                .endblock

star:
                lda #26
                jsr oswrch
                lda #12
                jsr oswrch

                ldx #<input_buffer
                ldy #>input_buffer
                jsr oscli
                jsr press_any_key
                jmp restart_custom 
                .endproc

;-------------------------------------------------------------------------

press_any_key: .proc
                ldx #0
print_press_any_key_loop:
                lda press_any_key_message,x
                jsr oswrch
                inx
                cpx #size(press_any_key_message)
                bne print_press_any_key_loop

                lda #15
                ldx #0
                jsr osbyte

                jsr osrdch

                rts

press_any_key_message: .block
                .text 13,10,13,10,'Press any key to continue'
                .endblock
                
                .endproc
                
;-------------------------------------------------------------------------

write_spaces: .proc
                sta cpx_max+1
loop:
cpx_max:
                cpy #$ff
                beq done
                lda #' '
                sta (text_dest),y
                iny
                bne loop
done:
                rts
                .endproc

;-------------------------------------------------------------------------

write_text_routine: .proc
                sta text_dest+0
                sty text_dest+1
                ldy #0
loop:
                lda (text_src),y
                beq done
                sta (text_dest),y
                iny
                bne loop
done:
                rts
                .endproc

;-------------------------------------------------------------------------

; brk_handler_custom_load: .proc
;                 jsr print_brk_message
;                 rts
;                 .endproc
                
brk_handler_custom_star: .proc
                jsr print_brk_message
                jsr press_any_key
                jmp restart_custom
                .endproc

;-------------------------------------------------------------------------

print_brk_message: .proc
                jsr osnewl
                
                ldy #1
brk_handler_loop:
                lda ($fd),y
                beq done
                jsr oswrch
                iny
                bne brk_handler_loop
done:
                rts
                .endproc
                
;-------------------------------------------------------------------------

screen: .block
                .text 26,12
                .text 23,1,0,0,0,0,0,0,0,0
                .for _i=0,_i<2,_i+=1
                .text 31,11,0+_i,141,129+_i,'GHOULS: REVENGE'
                .text 31,0,level_name_y+_i,141,131,'[',130
                .text 31,36,level_name_y+_i,131,']'
                .endfor
                .text 31,14,2,147,'``,,ppp,,``'
                .text 31,6,4,134,'Use',135,'[',134,'and',135,']',134,'to select levels'
                .text 31,9,5,134,'Press',135,'RETURN',134,'to select'
                .text 31,0,designer_y,134,'Designer:',133
                .text 31,0,difficulty_y,134,'Difficulty:',133
                ;.text 31,38,24,129
                ; there's a 13 in the text inserted in the keyboard
                ; buffer, so ensure the cursor ends up somewhere safe.
                .text 30
                .endblock

;-------------------------------------------------------------------------

osfile_block: .block
name: .fill 2
load: .dword $ffff0000|levels_org
exec: .dword 0                  ; 0 = use block address
length: .dword 0
attr: .dword 0
                .endblock

;-------------------------------------------------------------------------

run_commands_gbas:
                .text 'PAGE=&1100',13
                ; and sneak a cheeky VDU6 in...
                .text 'CH."GBAS"',6,13
                .cerror *-run_commands_gbas>=32 ; keyboard buffer is only so large...
                .text 0

run_commands_dgbas:
                .text 'PAGE=&1100',13
                .text 'CH."D.GBAS"',6,13
                .cerror *-run_commands_dgbas>=32 ; keyboard buffer is only so large...
                .text 0

load_gmc: .text 'LOAD $.GMC',13

basic: .text 'BASIC',13
                
;-------------------------------------------------------------------------

; Doesn't matter if GMC overwrites the level data.
                .cerror *>gmc_org
                
;-------------------------------------------------------------------------

                .include "../build/levels.generated.s65"

; The level data includes the file names, so it's required for the
; loading process.
                .cerror *>levels_org

;-------------------------------------------------------------------------
                .endsection code
;-------------------------------------------------------------------------
