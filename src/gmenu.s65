                .include "gcommon.s65"

;-------------------------------------------------------------------------

*=$70
                .dsection zp
                .cerror *>$90,'zp overflow'

*=$3000
                .dsection code
                .cerror *>$7c00,'code overflow'

;-------------------------------------------------------------------------

level_name_x=4
level_name_y=8
designer_x=11
designer_y=19
difficulty_x=13
difficulty_y=20
instructions_x=0
instructions_y=12
                
;-------------------------------------------------------------------------

                .section zp
level: .fill 1
text: .fill 2
text_dest: .fill 2
bbc_file_name: .fill 2
                .endsection zp

;-------------------------------------------------------------------------

load_text: .macro stem
                ldx level
                lda \1_lo,x
                sta text+0
                lda \1_hi,x
                sta text+1
                .endmacro

mode7_addr: .function _x,_y
                .cerror _x<0||_x>39
                .cerror _y<0||_y>24
                .endfunction $7c00+_y*40+_x

write_text0: .macro _x,_y
                lda #<mode7_addr(\_x,\_y)
                ldy #>mode7_addr(\_x,\_y)
                jsr write_text_routine
                .endmacro

write_text0n: .macro x_,y_,_n
                lda #<mode7_addr(\x_,\y_)
                ldy #>mode7_addr(\x_,\y_)
                jsr write_text_routine
                lda #\_n
                jsr write_spaces
                .endmacro

;-------------------------------------------------------------------------
                .section code
;-------------------------------------------------------------------------

entry:
                ldx #0
print_screen_loop:
                lda screen,x
                jsr oswrch
                inx
                cpx #size(screen)
                bne print_screen_loop

                lda #0
                sta level

                ; cursor keys = ASCII values
                lda #4
                ldx #1
                jsr osbyte

main_loop:
                jsr redraw

key_loop:
                ; don't care about ESCAPE...
                lda #$7e
                jsr osbyte
                
                jsr osrdch

                cmp #13
                beq load

                cmp #136
                beq left

                cmp #137
                beq right

                jmp key_loop
                
                rts

left:
                dec level
                bpl main_loop
                lda #num_levels-1
                sta level
                jmp main_loop

right:
                inc level
                lda level
                cmp #num_levels
                bne main_loop
                lda #0
                sta level
                jmp main_loop

redraw:
                lda #19
                jsr osbyte

                .load_text level_title_addrs
                .write_text0n level_name_x,level_name_y+0,title_length
                .write_text0n level_name_x,level_name_y+1,title_length

                .load_text level_instr_addrs
                .write_text0n instructions_x,instructions_y,size(TextData.instructions)

                .load_text level_designer_addrs
                .write_text0n designer_x,designer_y,25

                .load_text level_difficulty_addrs
                .write_text0n difficulty_x,difficulty_y,25
                
                rts

;-------------------------------------------------------------------------

load:
                ldx level
                lda level_bbc_file_name_addrs_lo,x
                sta bbc_file_name+0
                lda level_bbc_file_name_addrs_hi,x
                sta bbc_file_name+1

                ldy #0
                lda (bbc_file_name),y
                cmp #13
                beq main_loop       ; TODO...

                lda bbc_file_name+0
                sta osfile_block+0
                lda bbc_file_name+1
                sta osfile_block+1

                lda #$ff        ; load file
                ldx #<osfile_block
                ldy #>osfile_block
                jsr osfile

                ldx #0
type_run_commands_loop:
                txa
                pha

                lda #138
                ldx #0
                ldy run_commands,x
                beq run_commands_typed

                jsr osbyte

                pla
                tax
                inx
                jmp type_run_commands_loop

run_commands_typed:
                ldx #<load_gmc
                ldy #>load_gmc
                jsr oscli

                ldx #<basic
                ldy #>basic
                jmp oscli
                
;-------------------------------------------------------------------------

write_spaces: .proc
                sta cpx_max+1
loop:
cpx_max:
                cpy #$ff
                beq done
                lda #' '
                sta (text_dest),y
                iny
                bne loop
done:
                rts
                .endproc

;-------------------------------------------------------------------------

write_text_routine: .proc
                sta text_dest+0
                sty text_dest+1
                ldy #0
loop:
                lda (text),y
                beq done
                sta (text_dest),y
                iny
                bne loop
done:
                rts
                .endproc

;-------------------------------------------------------------------------

screen: .block
                .text 22,7
                .text 23,1,0,0,0,0,0,0,0,0
                .for _i=0,_i<2,_i+=1
                .text 31,11,0+_i,141,129+_i,'GHOULS: REVENGE'
                .text 31,0,level_name_y+_i,141,131,'[',130
                .text 31,36,level_name_y+_i,131,']'
                .endfor
                .text 31,14,2,147,'``,,ppp,,``'
                .text 31,6,4,134,'Use',135,'[',134,'and',135,']',134,'to select levels'
                .text 31,9,5,134,'Press',135,'RETURN',134,'to select'
                .text 31,0,designer_y,134,'Designer:',133
                .text 31,0,difficulty_y,134,'Difficulty:',133
                .endblock

;-------------------------------------------------------------------------

osfile_block: .block
name: .fill 2
load: .dword $ffff0000|levels_org
exec: .dword 0                  ; 0 = use block address
length: .dword 0
attr: .dword 0
                .endblock

;-------------------------------------------------------------------------

run_commands:
                .text 'PAGE=&1100',13
                .text 'CH."GBAS"',13
                .cerror *-run_commands>=32 ; keyboard buffer is only so large...
                .text 0

load_gmc: .text 'LOAD $.GMC',13

basic: .text 'BASIC',13
                
;-------------------------------------------------------------------------

                .include "../build/levels.generated.s65"

;-------------------------------------------------------------------------
                .endsection code
;-------------------------------------------------------------------------
